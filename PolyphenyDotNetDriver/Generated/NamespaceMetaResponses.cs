// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: org/polypheny/prism/namespace_meta_responses.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Polypheny.Prism {

  /// <summary>Holder for reflection information generated from org/polypheny/prism/namespace_meta_responses.proto</summary>
  public static partial class NamespaceMetaResponsesReflection {

    #region Descriptor
    /// <summary>File descriptor for org/polypheny/prism/namespace_meta_responses.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NamespaceMetaResponsesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJvcmcvcG9seXBoZW55L3ByaXNtL25hbWVzcGFjZV9tZXRhX3Jlc3BvbnNl",
            "cy5wcm90bxITb3JnLnBvbHlwaGVueS5wcmlzbSJIChJOYW1lc3BhY2VzUmVz",
            "cG9uc2USMgoKbmFtZXNwYWNlcxgBIAMoCzIeLm9yZy5wb2x5cGhlbnkucHJp",
            "c20uTmFtZXNwYWNlIkEKEEVudGl0aWVzUmVzcG9uc2USLQoIZW50aXRpZXMY",
            "ASADKAsyGy5vcmcucG9seXBoZW55LnByaXNtLkVudGl0eSJuCglOYW1lc3Bh",
            "Y2USFgoObmFtZXNwYWNlX25hbWUYASABKAkSGQoRaXNfY2FzZV9zZW5zaXRp",
            "dmUYBCABKAgSGwoObmFtZXNwYWNlX3R5cGUYBSABKAlIAIgBAUIRCg9fbmFt",
            "ZXNwYWNlX3R5cGUinwEKBkVudGl0eRIrCgV0YWJsZRgBIAEoCzIaLm9yZy5w",
            "b2x5cGhlbnkucHJpc20uVGFibGVIABIrCgVncmFwaBgCIAEoCzIaLm9yZy5w",
            "b2x5cGhlbnkucHJpc20uR3JhcGhIABIxCghkb2N1bWVudBgDIAEoCzIdLm9y",
            "Zy5wb2x5cGhlbnkucHJpc20uRG9jdW1lbnRIAEIICgZFbnRpdHki3AIKBVRh",
            "YmxlEhYKDm5hbWVzcGFjZV9uYW1lGAIgASgJEhIKCnRhYmxlX25hbWUYAyAB",
            "KAkSEgoKdGFibGVfdHlwZRgEIAEoCRIsCgdjb2x1bW5zGAYgAygLMhsub3Jn",
            "LnBvbHlwaGVueS5wcmlzbS5Db2x1bW4SOQoLcHJpbWFyeV9rZXkYByABKAsy",
            "Hy5vcmcucG9seXBoZW55LnByaXNtLlByaW1hcnlLZXlIAIgBARI1Cgxmb3Jl",
            "aWduX2tleXMYCCADKAsyHy5vcmcucG9seXBoZW55LnByaXNtLkZvcmVpZ25L",
            "ZXkSNgoNZXhwb3J0ZWRfa2V5cxgJIAMoCzIfLm9yZy5wb2x5cGhlbnkucHJp",
            "c20uRm9yZWlnbktleRIrCgdpbmRleGVzGAogAygLMhoub3JnLnBvbHlwaGVu",
            "eS5wcmlzbS5JbmRleEIOCgxfcHJpbWFyeV9rZXki2gMKBkNvbHVtbhIWCg5u",
            "YW1lc3BhY2VfbmFtZRgCIAEoCRISCgp0YWJsZV9uYW1lGAMgASgJEhMKC2Nv",
            "bHVtbl9uYW1lGAQgASgJEhEKCXR5cGVfbmFtZRgFIAEoCRIYCgt0eXBlX2xl",
            "bmd0aBgGIAEoBUgAiAEBEhcKCnR5cGVfc2NhbGUYByABKAVIAYgBARITCgtp",
            "c19udWxsYWJsZRgIIAEoCBIkChdkZWZhdWx0X3ZhbHVlX2FzX3N0cmluZxgJ",
            "IAEoCUgCiAEBEhQKDGNvbHVtbl9pbmRleBgKIAEoBRIWCgljb2xsYXRpb24Y",
            "CyABKAlIA4gBARIRCglpc19oaWRkZW4YDCABKAgSOwoLY29sdW1uX3R5cGUY",
            "DSABKA4yJi5vcmcucG9seXBoZW55LnByaXNtLkNvbHVtbi5Db2x1bW5UeXBl",
            "IkcKCkNvbHVtblR5cGUSDwoLVU5TUEVDSUZJRUQQABILCgdSRUdVTEFSEAES",
            "DgoKQ0FMQ1VMQVRFRBACEgsKB1ZFUlNJT04QA0IOCgxfdHlwZV9sZW5ndGhC",
            "DQoLX3R5cGVfc2NhbGVCGgoYX2RlZmF1bHRfdmFsdWVfYXNfc3RyaW5nQgwK",
            "Cl9jb2xsYXRpb24ifQoKUHJpbWFyeUtleRIVCg1kYXRhYmFzZV9uYW1lGAEg",
            "ASgJEhYKDm5hbWVzcGFjZV9uYW1lGAIgASgJEhIKCnRhYmxlX25hbWUYAyAB",
            "KAkSLAoHY29sdW1ucxgEIAMoCzIbLm9yZy5wb2x5cGhlbnkucHJpc20uQ29s",
            "dW1uIq4CCgpGb3JlaWduS2V5EiYKGXJlZmVyZW5jZWRfbmFtZXNwYWNlX25h",
            "bWUYAiABKAlIAIgBARIdChVyZWZlcmVuY2VkX3RhYmxlX25hbWUYAyABKAkS",
            "NwoScmVmZXJlbmNlZF9jb2x1bW5zGAQgAygLMhsub3JnLnBvbHlwaGVueS5w",
            "cmlzbS5Db2x1bW4SNAoPZm9yZWlnbl9jb2x1bW5zGAggAygLMhsub3JnLnBv",
            "bHlwaGVueS5wcmlzbS5Db2x1bW4SEwoLdXBkYXRlX3J1bGUYCiABKAUSEwoL",
            "ZGVsZXRlX3J1bGUYCyABKAUSFQoIa2V5X25hbWUYDCABKAlIAYgBAUIcChpf",
            "cmVmZXJlbmNlZF9uYW1lc3BhY2VfbmFtZUILCglfa2V5X25hbWUiqwEKBUlu",
            "ZGV4EhYKDm5hbWVzcGFjZV9uYW1lGAIgASgJEhIKCnRhYmxlX25hbWUYAyAB",
            "KAkSDgoGdW5pcXVlGAQgASgIEhIKCmluZGV4X25hbWUYBSABKAkSLAoHY29s",
            "dW1ucxgGIAMoCzIbLm9yZy5wb2x5cGhlbnkucHJpc20uQ29sdW1uEhAKCGxv",
            "Y2F0aW9uGAggASgDEhIKCmluZGV4X3R5cGUYCSABKAUiBwoFR3JhcGgiCgoI",
            "RG9jdW1lbnRCXAoTb3JnLnBvbHlwaGVueS5wcmlzbUIWTmFtZXNwYWNlTWV0",
            "YVJlc3BvbnNlc1ABWhlvcmcvcG9seXBoZW55L3ByaXNtO3ByaXNtqgIPUG9s",
            "eXBoZW55LlByaXNtYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.NamespacesResponse), global::Polypheny.Prism.NamespacesResponse.Parser, new[]{ "Namespaces" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.EntitiesResponse), global::Polypheny.Prism.EntitiesResponse.Parser, new[]{ "Entities" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.Namespace), global::Polypheny.Prism.Namespace.Parser, new[]{ "NamespaceName", "IsCaseSensitive", "NamespaceType" }, new[]{ "NamespaceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.Entity), global::Polypheny.Prism.Entity.Parser, new[]{ "Table", "Graph", "Document" }, new[]{ "Entity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.Table), global::Polypheny.Prism.Table.Parser, new[]{ "NamespaceName", "TableName", "TableType", "Columns", "PrimaryKey", "ForeignKeys", "ExportedKeys", "Indexes" }, new[]{ "PrimaryKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.Column), global::Polypheny.Prism.Column.Parser, new[]{ "NamespaceName", "TableName", "ColumnName", "TypeName", "TypeLength", "TypeScale", "IsNullable", "DefaultValueAsString", "ColumnIndex", "Collation", "IsHidden", "ColumnType" }, new[]{ "TypeLength", "TypeScale", "DefaultValueAsString", "Collation" }, new[]{ typeof(global::Polypheny.Prism.Column.Types.ColumnType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.PrimaryKey), global::Polypheny.Prism.PrimaryKey.Parser, new[]{ "DatabaseName", "NamespaceName", "TableName", "Columns" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.ForeignKey), global::Polypheny.Prism.ForeignKey.Parser, new[]{ "ReferencedNamespaceName", "ReferencedTableName", "ReferencedColumns", "ForeignColumns", "UpdateRule", "DeleteRule", "KeyName" }, new[]{ "ReferencedNamespaceName", "KeyName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.Index), global::Polypheny.Prism.Index.Parser, new[]{ "NamespaceName", "TableName", "Unique", "IndexName", "Columns", "Location", "IndexType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.Graph), global::Polypheny.Prism.Graph.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.Document), global::Polypheny.Prism.Document.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///The NamespacesResponse message delivers a list of namespaces based on the provided criteria in the NamespacesRequest.
  /// </summary>
  public sealed partial class NamespacesResponse : pb::IMessage<NamespacesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NamespacesResponse> _parser = new pb::MessageParser<NamespacesResponse>(() => new NamespacesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NamespacesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaResponsesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamespacesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamespacesResponse(NamespacesResponse other) : this() {
      namespaces_ = other.namespaces_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamespacesResponse Clone() {
      return new NamespacesResponse(this);
    }

    /// <summary>Field number for the "namespaces" field.</summary>
    public const int NamespacesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.Namespace> _repeated_namespaces_codec
        = pb::FieldCodec.ForMessage(10, global::Polypheny.Prism.Namespace.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.Namespace> namespaces_ = new pbc::RepeatedField<global::Polypheny.Prism.Namespace>();
    /// <summary>
    /// A list of Namespace messages containing information about each namespace that matches the search criteria.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.Namespace> Namespaces {
      get { return namespaces_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NamespacesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NamespacesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!namespaces_.Equals(other.namespaces_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= namespaces_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      namespaces_.WriteTo(output, _repeated_namespaces_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      namespaces_.WriteTo(ref output, _repeated_namespaces_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += namespaces_.CalculateSize(_repeated_namespaces_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NamespacesResponse other) {
      if (other == null) {
        return;
      }
      namespaces_.Add(other.namespaces_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            namespaces_.AddEntriesFrom(input, _repeated_namespaces_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            namespaces_.AddEntriesFrom(ref input, _repeated_namespaces_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///The EntitiesResponse message returns a list of entities that match the provided criteria from the EntitiesRequest.
  /// </summary>
  public sealed partial class EntitiesResponse : pb::IMessage<EntitiesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EntitiesResponse> _parser = new pb::MessageParser<EntitiesResponse>(() => new EntitiesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntitiesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaResponsesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntitiesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntitiesResponse(EntitiesResponse other) : this() {
      entities_ = other.entities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntitiesResponse Clone() {
      return new EntitiesResponse(this);
    }

    /// <summary>Field number for the "entities" field.</summary>
    public const int EntitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.Entity> _repeated_entities_codec
        = pb::FieldCodec.ForMessage(10, global::Polypheny.Prism.Entity.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.Entity> entities_ = new pbc::RepeatedField<global::Polypheny.Prism.Entity>();
    /// <summary>
    /// A list of Entity messages containing information about each entity within the requested namespace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.Entity> Entities {
      get { return entities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntitiesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntitiesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entities_.Equals(other.entities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      entities_.WriteTo(output, _repeated_entities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      entities_.WriteTo(ref output, _repeated_entities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entities_.CalculateSize(_repeated_entities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntitiesResponse other) {
      if (other == null) {
        return;
      }
      entities_.Add(other.entities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entities_.AddEntriesFrom(input, _repeated_entities_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            entities_.AddEntriesFrom(ref input, _repeated_entities_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///The Namespace message provides detailed information about a specific namespace.
  /// </summary>
  public sealed partial class Namespace : pb::IMessage<Namespace>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Namespace> _parser = new pb::MessageParser<Namespace>(() => new Namespace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Namespace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaResponsesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespace(Namespace other) : this() {
      namespaceName_ = other.namespaceName_;
      isCaseSensitive_ = other.isCaseSensitive_;
      namespaceType_ = other.namespaceType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespace Clone() {
      return new Namespace(this);
    }

    /// <summary>Field number for the "namespace_name" field.</summary>
    public const int NamespaceNameFieldNumber = 1;
    private string namespaceName_ = "";
    /// <summary>
    /// The name of the namespace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamespaceName {
      get { return namespaceName_; }
      set {
        namespaceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_case_sensitive" field.</summary>
    public const int IsCaseSensitiveFieldNumber = 4;
    private bool isCaseSensitive_;
    /// <summary>
    /// Indicates if the namespace name is case sensitive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCaseSensitive {
      get { return isCaseSensitive_; }
      set {
        isCaseSensitive_ = value;
      }
    }

    /// <summary>Field number for the "namespace_type" field.</summary>
    public const int NamespaceTypeFieldNumber = 5;
    private string namespaceType_;
    /// <summary>
    /// An optional field providing the type of the namespace, if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamespaceType {
      get { return namespaceType_ ?? ""; }
      set {
        namespaceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "namespace_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNamespaceType {
      get { return namespaceType_ != null; }
    }
    /// <summary>Clears the value of the "namespace_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNamespaceType() {
      namespaceType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Namespace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Namespace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NamespaceName != other.NamespaceName) return false;
      if (IsCaseSensitive != other.IsCaseSensitive) return false;
      if (NamespaceType != other.NamespaceType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NamespaceName.Length != 0) hash ^= NamespaceName.GetHashCode();
      if (IsCaseSensitive != false) hash ^= IsCaseSensitive.GetHashCode();
      if (HasNamespaceType) hash ^= NamespaceType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NamespaceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NamespaceName);
      }
      if (IsCaseSensitive != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsCaseSensitive);
      }
      if (HasNamespaceType) {
        output.WriteRawTag(42);
        output.WriteString(NamespaceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NamespaceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NamespaceName);
      }
      if (IsCaseSensitive != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsCaseSensitive);
      }
      if (HasNamespaceType) {
        output.WriteRawTag(42);
        output.WriteString(NamespaceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NamespaceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespaceName);
      }
      if (IsCaseSensitive != false) {
        size += 1 + 1;
      }
      if (HasNamespaceType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespaceType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Namespace other) {
      if (other == null) {
        return;
      }
      if (other.NamespaceName.Length != 0) {
        NamespaceName = other.NamespaceName;
      }
      if (other.IsCaseSensitive != false) {
        IsCaseSensitive = other.IsCaseSensitive;
      }
      if (other.HasNamespaceType) {
        NamespaceType = other.NamespaceType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NamespaceName = input.ReadString();
            break;
          }
          case 32: {
            IsCaseSensitive = input.ReadBool();
            break;
          }
          case 42: {
            NamespaceType = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            NamespaceName = input.ReadString();
            break;
          }
          case 32: {
            IsCaseSensitive = input.ReadBool();
            break;
          }
          case 42: {
            NamespaceType = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///The Entity message acts as a generic wrapper for different of entities metadata messages.
  ///Only one of the entities metadata fields can be set for a given message instance.
  ///Different entity metadata messages are used to represent the metadata of different entity types.
  ///The available entity metadata messages are, Table for relational entities, Graph for labeled property graph entities and
  ///Document for entities in the document model.
  /// </summary>
  public sealed partial class Entity : pb::IMessage<Entity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Entity> _parser = new pb::MessageParser<Entity>(() => new Entity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaResponsesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity(Entity other) : this() {
      switch (other.EntityCase) {
        case EntityOneofCase.Table:
          Table = other.Table.Clone();
          break;
        case EntityOneofCase.Graph:
          Graph = other.Graph.Clone();
          break;
        case EntityOneofCase.Document:
          Document = other.Document.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity Clone() {
      return new Entity(this);
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 1;
    /// <summary>
    /// An entity of type Table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Polypheny.Prism.Table Table {
      get { return entityCase_ == EntityOneofCase.Table ? (global::Polypheny.Prism.Table) entity_ : null; }
      set {
        entity_ = value;
        entityCase_ = value == null ? EntityOneofCase.None : EntityOneofCase.Table;
      }
    }

    /// <summary>Field number for the "graph" field.</summary>
    public const int GraphFieldNumber = 2;
    /// <summary>
    /// An entity of type Graph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Polypheny.Prism.Graph Graph {
      get { return entityCase_ == EntityOneofCase.Graph ? (global::Polypheny.Prism.Graph) entity_ : null; }
      set {
        entity_ = value;
        entityCase_ = value == null ? EntityOneofCase.None : EntityOneofCase.Graph;
      }
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 3;
    /// <summary>
    /// An entity of type Document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Polypheny.Prism.Document Document {
      get { return entityCase_ == EntityOneofCase.Document ? (global::Polypheny.Prism.Document) entity_ : null; }
      set {
        entity_ = value;
        entityCase_ = value == null ? EntityOneofCase.None : EntityOneofCase.Document;
      }
    }

    private object entity_;
    /// <summary>Enum of possible cases for the "Entity" oneof.</summary>
    public enum EntityOneofCase {
      None = 0,
      Table = 1,
      Graph = 2,
      Document = 3,
    }
    private EntityOneofCase entityCase_ = EntityOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityOneofCase EntityCase {
      get { return entityCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntity() {
      entityCase_ = EntityOneofCase.None;
      entity_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Table, other.Table)) return false;
      if (!object.Equals(Graph, other.Graph)) return false;
      if (!object.Equals(Document, other.Document)) return false;
      if (EntityCase != other.EntityCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entityCase_ == EntityOneofCase.Table) hash ^= Table.GetHashCode();
      if (entityCase_ == EntityOneofCase.Graph) hash ^= Graph.GetHashCode();
      if (entityCase_ == EntityOneofCase.Document) hash ^= Document.GetHashCode();
      hash ^= (int) entityCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (entityCase_ == EntityOneofCase.Table) {
        output.WriteRawTag(10);
        output.WriteMessage(Table);
      }
      if (entityCase_ == EntityOneofCase.Graph) {
        output.WriteRawTag(18);
        output.WriteMessage(Graph);
      }
      if (entityCase_ == EntityOneofCase.Document) {
        output.WriteRawTag(26);
        output.WriteMessage(Document);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (entityCase_ == EntityOneofCase.Table) {
        output.WriteRawTag(10);
        output.WriteMessage(Table);
      }
      if (entityCase_ == EntityOneofCase.Graph) {
        output.WriteRawTag(18);
        output.WriteMessage(Graph);
      }
      if (entityCase_ == EntityOneofCase.Document) {
        output.WriteRawTag(26);
        output.WriteMessage(Document);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entityCase_ == EntityOneofCase.Table) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      if (entityCase_ == EntityOneofCase.Graph) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Graph);
      }
      if (entityCase_ == EntityOneofCase.Document) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entity other) {
      if (other == null) {
        return;
      }
      switch (other.EntityCase) {
        case EntityOneofCase.Table:
          if (Table == null) {
            Table = new global::Polypheny.Prism.Table();
          }
          Table.MergeFrom(other.Table);
          break;
        case EntityOneofCase.Graph:
          if (Graph == null) {
            Graph = new global::Polypheny.Prism.Graph();
          }
          Graph.MergeFrom(other.Graph);
          break;
        case EntityOneofCase.Document:
          if (Document == null) {
            Document = new global::Polypheny.Prism.Document();
          }
          Document.MergeFrom(other.Document);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Polypheny.Prism.Table subBuilder = new global::Polypheny.Prism.Table();
            if (entityCase_ == EntityOneofCase.Table) {
              subBuilder.MergeFrom(Table);
            }
            input.ReadMessage(subBuilder);
            Table = subBuilder;
            break;
          }
          case 18: {
            global::Polypheny.Prism.Graph subBuilder = new global::Polypheny.Prism.Graph();
            if (entityCase_ == EntityOneofCase.Graph) {
              subBuilder.MergeFrom(Graph);
            }
            input.ReadMessage(subBuilder);
            Graph = subBuilder;
            break;
          }
          case 26: {
            global::Polypheny.Prism.Document subBuilder = new global::Polypheny.Prism.Document();
            if (entityCase_ == EntityOneofCase.Document) {
              subBuilder.MergeFrom(Document);
            }
            input.ReadMessage(subBuilder);
            Document = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Polypheny.Prism.Table subBuilder = new global::Polypheny.Prism.Table();
            if (entityCase_ == EntityOneofCase.Table) {
              subBuilder.MergeFrom(Table);
            }
            input.ReadMessage(subBuilder);
            Table = subBuilder;
            break;
          }
          case 18: {
            global::Polypheny.Prism.Graph subBuilder = new global::Polypheny.Prism.Graph();
            if (entityCase_ == EntityOneofCase.Graph) {
              subBuilder.MergeFrom(Graph);
            }
            input.ReadMessage(subBuilder);
            Graph = subBuilder;
            break;
          }
          case 26: {
            global::Polypheny.Prism.Document subBuilder = new global::Polypheny.Prism.Document();
            if (entityCase_ == EntityOneofCase.Document) {
              subBuilder.MergeFrom(Document);
            }
            input.ReadMessage(subBuilder);
            Document = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///The Table message provides comprehensive information about a specific table within a database.
  /// </summary>
  public sealed partial class Table : pb::IMessage<Table>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Table> _parser = new pb::MessageParser<Table>(() => new Table());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Table> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaResponsesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table(Table other) : this() {
      namespaceName_ = other.namespaceName_;
      tableName_ = other.tableName_;
      tableType_ = other.tableType_;
      columns_ = other.columns_.Clone();
      primaryKey_ = other.primaryKey_ != null ? other.primaryKey_.Clone() : null;
      foreignKeys_ = other.foreignKeys_.Clone();
      exportedKeys_ = other.exportedKeys_.Clone();
      indexes_ = other.indexes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table Clone() {
      return new Table(this);
    }

    /// <summary>Field number for the "namespace_name" field.</summary>
    public const int NamespaceNameFieldNumber = 2;
    private string namespaceName_ = "";
    /// <summary>
    /// The namespace or schema where the table is located.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamespaceName {
      get { return namespaceName_; }
      set {
        namespaceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 3;
    private string tableName_ = "";
    /// <summary>
    /// The name of the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_type" field.</summary>
    public const int TableTypeFieldNumber = 4;
    private string tableType_ = "";
    /// <summary>
    /// The type of the table (e.g., BASE TABLE, VIEW).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableType {
      get { return tableType_; }
      set {
        tableType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.Column> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(50, global::Polypheny.Prism.Column.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.Column> columns_ = new pbc::RepeatedField<global::Polypheny.Prism.Column>();
    /// <summary>
    /// A list of Column messages providing information about each column in the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.Column> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "primary_key" field.</summary>
    public const int PrimaryKeyFieldNumber = 7;
    private global::Polypheny.Prism.PrimaryKey primaryKey_;
    /// <summary>
    /// An optional PrimaryKey message, providing details about the primary key of the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Polypheny.Prism.PrimaryKey PrimaryKey {
      get { return primaryKey_; }
      set {
        primaryKey_ = value;
      }
    }

    /// <summary>Field number for the "foreign_keys" field.</summary>
    public const int ForeignKeysFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.ForeignKey> _repeated_foreignKeys_codec
        = pb::FieldCodec.ForMessage(66, global::Polypheny.Prism.ForeignKey.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.ForeignKey> foreignKeys_ = new pbc::RepeatedField<global::Polypheny.Prism.ForeignKey>();
    /// <summary>
    /// A list of ForeignKey messages detailing the foreign keys associated with the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.ForeignKey> ForeignKeys {
      get { return foreignKeys_; }
    }

    /// <summary>Field number for the "exported_keys" field.</summary>
    public const int ExportedKeysFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.ForeignKey> _repeated_exportedKeys_codec
        = pb::FieldCodec.ForMessage(74, global::Polypheny.Prism.ForeignKey.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.ForeignKey> exportedKeys_ = new pbc::RepeatedField<global::Polypheny.Prism.ForeignKey>();
    /// <summary>
    /// A list of ForeignKey messages detailing the keys in other tables that reference this table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.ForeignKey> ExportedKeys {
      get { return exportedKeys_; }
    }

    /// <summary>Field number for the "indexes" field.</summary>
    public const int IndexesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.Index> _repeated_indexes_codec
        = pb::FieldCodec.ForMessage(82, global::Polypheny.Prism.Index.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.Index> indexes_ = new pbc::RepeatedField<global::Polypheny.Prism.Index>();
    /// <summary>
    /// A list of Index messages detailing the indexes defined on the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.Index> Indexes {
      get { return indexes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Table);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Table other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NamespaceName != other.NamespaceName) return false;
      if (TableName != other.TableName) return false;
      if (TableType != other.TableType) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if (!object.Equals(PrimaryKey, other.PrimaryKey)) return false;
      if(!foreignKeys_.Equals(other.foreignKeys_)) return false;
      if(!exportedKeys_.Equals(other.exportedKeys_)) return false;
      if(!indexes_.Equals(other.indexes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NamespaceName.Length != 0) hash ^= NamespaceName.GetHashCode();
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (TableType.Length != 0) hash ^= TableType.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (primaryKey_ != null) hash ^= PrimaryKey.GetHashCode();
      hash ^= foreignKeys_.GetHashCode();
      hash ^= exportedKeys_.GetHashCode();
      hash ^= indexes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NamespaceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NamespaceName);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableName);
      }
      if (TableType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TableType);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      if (primaryKey_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PrimaryKey);
      }
      foreignKeys_.WriteTo(output, _repeated_foreignKeys_codec);
      exportedKeys_.WriteTo(output, _repeated_exportedKeys_codec);
      indexes_.WriteTo(output, _repeated_indexes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NamespaceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NamespaceName);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableName);
      }
      if (TableType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TableType);
      }
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (primaryKey_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PrimaryKey);
      }
      foreignKeys_.WriteTo(ref output, _repeated_foreignKeys_codec);
      exportedKeys_.WriteTo(ref output, _repeated_exportedKeys_codec);
      indexes_.WriteTo(ref output, _repeated_indexes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NamespaceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespaceName);
      }
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (TableType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableType);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (primaryKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimaryKey);
      }
      size += foreignKeys_.CalculateSize(_repeated_foreignKeys_codec);
      size += exportedKeys_.CalculateSize(_repeated_exportedKeys_codec);
      size += indexes_.CalculateSize(_repeated_indexes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Table other) {
      if (other == null) {
        return;
      }
      if (other.NamespaceName.Length != 0) {
        NamespaceName = other.NamespaceName;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.TableType.Length != 0) {
        TableType = other.TableType;
      }
      columns_.Add(other.columns_);
      if (other.primaryKey_ != null) {
        if (primaryKey_ == null) {
          PrimaryKey = new global::Polypheny.Prism.PrimaryKey();
        }
        PrimaryKey.MergeFrom(other.PrimaryKey);
      }
      foreignKeys_.Add(other.foreignKeys_);
      exportedKeys_.Add(other.exportedKeys_);
      indexes_.Add(other.indexes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            NamespaceName = input.ReadString();
            break;
          }
          case 26: {
            TableName = input.ReadString();
            break;
          }
          case 34: {
            TableType = input.ReadString();
            break;
          }
          case 50: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 58: {
            if (primaryKey_ == null) {
              PrimaryKey = new global::Polypheny.Prism.PrimaryKey();
            }
            input.ReadMessage(PrimaryKey);
            break;
          }
          case 66: {
            foreignKeys_.AddEntriesFrom(input, _repeated_foreignKeys_codec);
            break;
          }
          case 74: {
            exportedKeys_.AddEntriesFrom(input, _repeated_exportedKeys_codec);
            break;
          }
          case 82: {
            indexes_.AddEntriesFrom(input, _repeated_indexes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            NamespaceName = input.ReadString();
            break;
          }
          case 26: {
            TableName = input.ReadString();
            break;
          }
          case 34: {
            TableType = input.ReadString();
            break;
          }
          case 50: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 58: {
            if (primaryKey_ == null) {
              PrimaryKey = new global::Polypheny.Prism.PrimaryKey();
            }
            input.ReadMessage(PrimaryKey);
            break;
          }
          case 66: {
            foreignKeys_.AddEntriesFrom(ref input, _repeated_foreignKeys_codec);
            break;
          }
          case 74: {
            exportedKeys_.AddEntriesFrom(ref input, _repeated_exportedKeys_codec);
            break;
          }
          case 82: {
            indexes_.AddEntriesFrom(ref input, _repeated_indexes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///The Column message describes the attributes of a specific column within a table.
  /// </summary>
  public sealed partial class Column : pb::IMessage<Column>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaResponsesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Column(Column other) : this() {
      _hasBits0 = other._hasBits0;
      namespaceName_ = other.namespaceName_;
      tableName_ = other.tableName_;
      columnName_ = other.columnName_;
      typeName_ = other.typeName_;
      typeLength_ = other.typeLength_;
      typeScale_ = other.typeScale_;
      isNullable_ = other.isNullable_;
      defaultValueAsString_ = other.defaultValueAsString_;
      columnIndex_ = other.columnIndex_;
      collation_ = other.collation_;
      isHidden_ = other.isHidden_;
      columnType_ = other.columnType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "namespace_name" field.</summary>
    public const int NamespaceNameFieldNumber = 2;
    private string namespaceName_ = "";
    /// <summary>
    /// The namespace or schema of the column’s table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamespaceName {
      get { return namespaceName_; }
      set {
        namespaceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 3;
    private string tableName_ = "";
    /// <summary>
    /// The table to which this column belongs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_name" field.</summary>
    public const int ColumnNameFieldNumber = 4;
    private string columnName_ = "";
    /// <summary>
    /// The name of the column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnName {
      get { return columnName_; }
      set {
        columnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type_name" field.</summary>
    public const int TypeNameFieldNumber = 5;
    private string typeName_ = "";
    /// <summary>
    /// The data type of the column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type_length" field.</summary>
    public const int TypeLengthFieldNumber = 6;
    private int typeLength_;
    /// <summary>
    /// The length or size of the column type, if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeLength {
      get { if ((_hasBits0 & 1) != 0) { return typeLength_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        typeLength_ = value;
      }
    }
    /// <summary>Gets whether the "type_length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTypeLength {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type_length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTypeLength() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type_scale" field.</summary>
    public const int TypeScaleFieldNumber = 7;
    private int typeScale_;
    /// <summary>
    /// The scale of the column type, if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeScale {
      get { if ((_hasBits0 & 2) != 0) { return typeScale_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        typeScale_ = value;
      }
    }
    /// <summary>Gets whether the "type_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTypeScale {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTypeScale() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_nullable" field.</summary>
    public const int IsNullableFieldNumber = 8;
    private bool isNullable_;
    /// <summary>
    /// Indicates if the column can contain null values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNullable {
      get { return isNullable_; }
      set {
        isNullable_ = value;
      }
    }

    /// <summary>Field number for the "default_value_as_string" field.</summary>
    public const int DefaultValueAsStringFieldNumber = 9;
    private string defaultValueAsString_;
    /// <summary>
    /// The default value of the column, represented as a string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultValueAsString {
      get { return defaultValueAsString_ ?? ""; }
      set {
        defaultValueAsString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "default_value_as_string" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDefaultValueAsString {
      get { return defaultValueAsString_ != null; }
    }
    /// <summary>Clears the value of the "default_value_as_string" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDefaultValueAsString() {
      defaultValueAsString_ = null;
    }

    /// <summary>Field number for the "column_index" field.</summary>
    public const int ColumnIndexFieldNumber = 10;
    private int columnIndex_;
    /// <summary>
    /// The positional index of the column in the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColumnIndex {
      get { return columnIndex_; }
      set {
        columnIndex_ = value;
      }
    }

    /// <summary>Field number for the "collation" field.</summary>
    public const int CollationFieldNumber = 11;
    private string collation_;
    /// <summary>
    /// The collation name for the column, if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collation {
      get { return collation_ ?? ""; }
      set {
        collation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "collation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCollation {
      get { return collation_ != null; }
    }
    /// <summary>Clears the value of the "collation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCollation() {
      collation_ = null;
    }

    /// <summary>Field number for the "is_hidden" field.</summary>
    public const int IsHiddenFieldNumber = 12;
    private bool isHidden_;
    /// <summary>
    /// Indicates if the column is hidden.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHidden {
      get { return isHidden_; }
      set {
        isHidden_ = value;
      }
    }

    /// <summary>Field number for the "column_type" field.</summary>
    public const int ColumnTypeFieldNumber = 13;
    private global::Polypheny.Prism.Column.Types.ColumnType columnType_ = global::Polypheny.Prism.Column.Types.ColumnType.Unspecified;
    /// <summary>
    /// An enumeration indicating the type of column (e.g., REGULAR, CALCULATED, VERSION).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Polypheny.Prism.Column.Types.ColumnType ColumnType {
      get { return columnType_; }
      set {
        columnType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NamespaceName != other.NamespaceName) return false;
      if (TableName != other.TableName) return false;
      if (ColumnName != other.ColumnName) return false;
      if (TypeName != other.TypeName) return false;
      if (TypeLength != other.TypeLength) return false;
      if (TypeScale != other.TypeScale) return false;
      if (IsNullable != other.IsNullable) return false;
      if (DefaultValueAsString != other.DefaultValueAsString) return false;
      if (ColumnIndex != other.ColumnIndex) return false;
      if (Collation != other.Collation) return false;
      if (IsHidden != other.IsHidden) return false;
      if (ColumnType != other.ColumnType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NamespaceName.Length != 0) hash ^= NamespaceName.GetHashCode();
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (ColumnName.Length != 0) hash ^= ColumnName.GetHashCode();
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (HasTypeLength) hash ^= TypeLength.GetHashCode();
      if (HasTypeScale) hash ^= TypeScale.GetHashCode();
      if (IsNullable != false) hash ^= IsNullable.GetHashCode();
      if (HasDefaultValueAsString) hash ^= DefaultValueAsString.GetHashCode();
      if (ColumnIndex != 0) hash ^= ColumnIndex.GetHashCode();
      if (HasCollation) hash ^= Collation.GetHashCode();
      if (IsHidden != false) hash ^= IsHidden.GetHashCode();
      if (ColumnType != global::Polypheny.Prism.Column.Types.ColumnType.Unspecified) hash ^= ColumnType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NamespaceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NamespaceName);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableName);
      }
      if (ColumnName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ColumnName);
      }
      if (TypeName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TypeName);
      }
      if (HasTypeLength) {
        output.WriteRawTag(48);
        output.WriteInt32(TypeLength);
      }
      if (HasTypeScale) {
        output.WriteRawTag(56);
        output.WriteInt32(TypeScale);
      }
      if (IsNullable != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsNullable);
      }
      if (HasDefaultValueAsString) {
        output.WriteRawTag(74);
        output.WriteString(DefaultValueAsString);
      }
      if (ColumnIndex != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ColumnIndex);
      }
      if (HasCollation) {
        output.WriteRawTag(90);
        output.WriteString(Collation);
      }
      if (IsHidden != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsHidden);
      }
      if (ColumnType != global::Polypheny.Prism.Column.Types.ColumnType.Unspecified) {
        output.WriteRawTag(104);
        output.WriteEnum((int) ColumnType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NamespaceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NamespaceName);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableName);
      }
      if (ColumnName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ColumnName);
      }
      if (TypeName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TypeName);
      }
      if (HasTypeLength) {
        output.WriteRawTag(48);
        output.WriteInt32(TypeLength);
      }
      if (HasTypeScale) {
        output.WriteRawTag(56);
        output.WriteInt32(TypeScale);
      }
      if (IsNullable != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsNullable);
      }
      if (HasDefaultValueAsString) {
        output.WriteRawTag(74);
        output.WriteString(DefaultValueAsString);
      }
      if (ColumnIndex != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ColumnIndex);
      }
      if (HasCollation) {
        output.WriteRawTag(90);
        output.WriteString(Collation);
      }
      if (IsHidden != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsHidden);
      }
      if (ColumnType != global::Polypheny.Prism.Column.Types.ColumnType.Unspecified) {
        output.WriteRawTag(104);
        output.WriteEnum((int) ColumnType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NamespaceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespaceName);
      }
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (ColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
      }
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (HasTypeLength) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeLength);
      }
      if (HasTypeScale) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeScale);
      }
      if (IsNullable != false) {
        size += 1 + 1;
      }
      if (HasDefaultValueAsString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultValueAsString);
      }
      if (ColumnIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColumnIndex);
      }
      if (HasCollation) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collation);
      }
      if (IsHidden != false) {
        size += 1 + 1;
      }
      if (ColumnType != global::Polypheny.Prism.Column.Types.ColumnType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ColumnType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      if (other.NamespaceName.Length != 0) {
        NamespaceName = other.NamespaceName;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.ColumnName.Length != 0) {
        ColumnName = other.ColumnName;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.HasTypeLength) {
        TypeLength = other.TypeLength;
      }
      if (other.HasTypeScale) {
        TypeScale = other.TypeScale;
      }
      if (other.IsNullable != false) {
        IsNullable = other.IsNullable;
      }
      if (other.HasDefaultValueAsString) {
        DefaultValueAsString = other.DefaultValueAsString;
      }
      if (other.ColumnIndex != 0) {
        ColumnIndex = other.ColumnIndex;
      }
      if (other.HasCollation) {
        Collation = other.Collation;
      }
      if (other.IsHidden != false) {
        IsHidden = other.IsHidden;
      }
      if (other.ColumnType != global::Polypheny.Prism.Column.Types.ColumnType.Unspecified) {
        ColumnType = other.ColumnType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            NamespaceName = input.ReadString();
            break;
          }
          case 26: {
            TableName = input.ReadString();
            break;
          }
          case 34: {
            ColumnName = input.ReadString();
            break;
          }
          case 42: {
            TypeName = input.ReadString();
            break;
          }
          case 48: {
            TypeLength = input.ReadInt32();
            break;
          }
          case 56: {
            TypeScale = input.ReadInt32();
            break;
          }
          case 64: {
            IsNullable = input.ReadBool();
            break;
          }
          case 74: {
            DefaultValueAsString = input.ReadString();
            break;
          }
          case 80: {
            ColumnIndex = input.ReadInt32();
            break;
          }
          case 90: {
            Collation = input.ReadString();
            break;
          }
          case 96: {
            IsHidden = input.ReadBool();
            break;
          }
          case 104: {
            ColumnType = (global::Polypheny.Prism.Column.Types.ColumnType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            NamespaceName = input.ReadString();
            break;
          }
          case 26: {
            TableName = input.ReadString();
            break;
          }
          case 34: {
            ColumnName = input.ReadString();
            break;
          }
          case 42: {
            TypeName = input.ReadString();
            break;
          }
          case 48: {
            TypeLength = input.ReadInt32();
            break;
          }
          case 56: {
            TypeScale = input.ReadInt32();
            break;
          }
          case 64: {
            IsNullable = input.ReadBool();
            break;
          }
          case 74: {
            DefaultValueAsString = input.ReadString();
            break;
          }
          case 80: {
            ColumnIndex = input.ReadInt32();
            break;
          }
          case 90: {
            Collation = input.ReadString();
            break;
          }
          case 96: {
            IsHidden = input.ReadBool();
            break;
          }
          case 104: {
            ColumnType = (global::Polypheny.Prism.Column.Types.ColumnType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Column message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///
      ///The PrimaryKey message provides details about a table’s primary key.
      /// </summary>
      public enum ColumnType {
        /// <summary>
        /// The database where the primary key’s table is located.
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The namespace or schema of the primary key’s table.
        /// </summary>
        [pbr::OriginalName("REGULAR")] Regular = 1,
        /// <summary>
        /// The table with this primary key.
        /// </summary>
        [pbr::OriginalName("CALCULATED")] Calculated = 2,
        /// <summary>
        /// The columns that make up the primary key.
        /// </summary>
        [pbr::OriginalName("VERSION")] Version = 3,
      }

    }
    #endregion

  }

  /// <summary>
  ///
  ///The PrimaryKey message provides details about a table’s primary key.
  /// </summary>
  public sealed partial class PrimaryKey : pb::IMessage<PrimaryKey>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PrimaryKey> _parser = new pb::MessageParser<PrimaryKey>(() => new PrimaryKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimaryKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaResponsesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimaryKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimaryKey(PrimaryKey other) : this() {
      databaseName_ = other.databaseName_;
      namespaceName_ = other.namespaceName_;
      tableName_ = other.tableName_;
      columns_ = other.columns_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimaryKey Clone() {
      return new PrimaryKey(this);
    }

    /// <summary>Field number for the "database_name" field.</summary>
    public const int DatabaseNameFieldNumber = 1;
    private string databaseName_ = "";
    /// <summary>
    /// The database where the primary key’s table is located.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseName {
      get { return databaseName_; }
      set {
        databaseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace_name" field.</summary>
    public const int NamespaceNameFieldNumber = 2;
    private string namespaceName_ = "";
    /// <summary>
    /// The namespace or schema of the primary key’s table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamespaceName {
      get { return namespaceName_; }
      set {
        namespaceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 3;
    private string tableName_ = "";
    /// <summary>
    /// The table with this primary key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.Column> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(34, global::Polypheny.Prism.Column.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.Column> columns_ = new pbc::RepeatedField<global::Polypheny.Prism.Column>();
    /// <summary>
    /// The columns that make up the primary key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.Column> Columns {
      get { return columns_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimaryKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimaryKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseName != other.DatabaseName) return false;
      if (NamespaceName != other.NamespaceName) return false;
      if (TableName != other.TableName) return false;
      if(!columns_.Equals(other.columns_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseName.Length != 0) hash ^= DatabaseName.GetHashCode();
      if (NamespaceName.Length != 0) hash ^= NamespaceName.GetHashCode();
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseName);
      }
      if (NamespaceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NamespaceName);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableName);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseName);
      }
      if (NamespaceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NamespaceName);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableName);
      }
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseName);
      }
      if (NamespaceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespaceName);
      }
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimaryKey other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseName.Length != 0) {
        DatabaseName = other.DatabaseName;
      }
      if (other.NamespaceName.Length != 0) {
        NamespaceName = other.NamespaceName;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      columns_.Add(other.columns_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DatabaseName = input.ReadString();
            break;
          }
          case 18: {
            NamespaceName = input.ReadString();
            break;
          }
          case 26: {
            TableName = input.ReadString();
            break;
          }
          case 34: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DatabaseName = input.ReadString();
            break;
          }
          case 18: {
            NamespaceName = input.ReadString();
            break;
          }
          case 26: {
            TableName = input.ReadString();
            break;
          }
          case 34: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///The ForeignKey message details a foreign key relationship between tables, providing information about the linkage between a table's column(s) and the column(s) of another table it references.
  ///This relationship is crucial for maintaining referential integrity within the database.
  /// </summary>
  public sealed partial class ForeignKey : pb::IMessage<ForeignKey>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ForeignKey> _parser = new pb::MessageParser<ForeignKey>(() => new ForeignKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForeignKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaResponsesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForeignKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForeignKey(ForeignKey other) : this() {
      referencedNamespaceName_ = other.referencedNamespaceName_;
      referencedTableName_ = other.referencedTableName_;
      referencedColumns_ = other.referencedColumns_.Clone();
      foreignColumns_ = other.foreignColumns_.Clone();
      updateRule_ = other.updateRule_;
      deleteRule_ = other.deleteRule_;
      keyName_ = other.keyName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForeignKey Clone() {
      return new ForeignKey(this);
    }

    /// <summary>Field number for the "referenced_namespace_name" field.</summary>
    public const int ReferencedNamespaceNameFieldNumber = 2;
    private string referencedNamespaceName_;
    /// <summary>
    ///
    ///The namespace or schema of the referenced table.
    ///This indicates the specific namespace or schema within the database where the referenced table resides.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferencedNamespaceName {
      get { return referencedNamespaceName_ ?? ""; }
      set {
        referencedNamespaceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "referenced_namespace_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReferencedNamespaceName {
      get { return referencedNamespaceName_ != null; }
    }
    /// <summary>Clears the value of the "referenced_namespace_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReferencedNamespaceName() {
      referencedNamespaceName_ = null;
    }

    /// <summary>Field number for the "referenced_table_name" field.</summary>
    public const int ReferencedTableNameFieldNumber = 3;
    private string referencedTableName_ = "";
    /// <summary>
    ///
    ///The table being referenced by the foreign key.
    ///This field identifies the target table that contains the referenced columns.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferencedTableName {
      get { return referencedTableName_; }
      set {
        referencedTableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "referenced_columns" field.</summary>
    public const int ReferencedColumnsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.Column> _repeated_referencedColumns_codec
        = pb::FieldCodec.ForMessage(34, global::Polypheny.Prism.Column.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.Column> referencedColumns_ = new pbc::RepeatedField<global::Polypheny.Prism.Column>();
    /// <summary>
    /// The columns in the referenced table. These are the columns in the referenced table that the foreign key points to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.Column> ReferencedColumns {
      get { return referencedColumns_; }
    }

    /// <summary>Field number for the "foreign_columns" field.</summary>
    public const int ForeignColumnsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.Column> _repeated_foreignColumns_codec
        = pb::FieldCodec.ForMessage(66, global::Polypheny.Prism.Column.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.Column> foreignColumns_ = new pbc::RepeatedField<global::Polypheny.Prism.Column>();
    /// <summary>
    ///
    ///The columns in the current table that make up the foreign key.
    ///These columns in the table contain the foreign key constraint reference the corresponding columns in the referenced table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.Column> ForeignColumns {
      get { return foreignColumns_; }
    }

    /// <summary>Field number for the "update_rule" field.</summary>
    public const int UpdateRuleFieldNumber = 10;
    private int updateRule_;
    /// <summary>
    ///
    ///A numeric representation of the action taken when a referenced row is updated.
    ///This rule determines how changes to the referenced columns affect the rows that hold the foreign key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdateRule {
      get { return updateRule_; }
      set {
        updateRule_ = value;
      }
    }

    /// <summary>Field number for the "delete_rule" field.</summary>
    public const int DeleteRuleFieldNumber = 11;
    private int deleteRule_;
    /// <summary>
    ///
    ///A numeric representation of the action taken when a referenced row is deleted.
    ///Similar to the update rule, this defines the behavior of the foreign key relationship when rows in the referenced table are deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeleteRule {
      get { return deleteRule_; }
      set {
        deleteRule_ = value;
      }
    }

    /// <summary>Field number for the "key_name" field.</summary>
    public const int KeyNameFieldNumber = 12;
    private string keyName_;
    /// <summary>
    ///
    ///An optional name for the foreign key constraint.
    ///This allows for the naming of the foreign key constraint for easier reference and management within the database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyName {
      get { return keyName_ ?? ""; }
      set {
        keyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKeyName {
      get { return keyName_ != null; }
    }
    /// <summary>Clears the value of the "key_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKeyName() {
      keyName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForeignKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForeignKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReferencedNamespaceName != other.ReferencedNamespaceName) return false;
      if (ReferencedTableName != other.ReferencedTableName) return false;
      if(!referencedColumns_.Equals(other.referencedColumns_)) return false;
      if(!foreignColumns_.Equals(other.foreignColumns_)) return false;
      if (UpdateRule != other.UpdateRule) return false;
      if (DeleteRule != other.DeleteRule) return false;
      if (KeyName != other.KeyName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReferencedNamespaceName) hash ^= ReferencedNamespaceName.GetHashCode();
      if (ReferencedTableName.Length != 0) hash ^= ReferencedTableName.GetHashCode();
      hash ^= referencedColumns_.GetHashCode();
      hash ^= foreignColumns_.GetHashCode();
      if (UpdateRule != 0) hash ^= UpdateRule.GetHashCode();
      if (DeleteRule != 0) hash ^= DeleteRule.GetHashCode();
      if (HasKeyName) hash ^= KeyName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReferencedNamespaceName) {
        output.WriteRawTag(18);
        output.WriteString(ReferencedNamespaceName);
      }
      if (ReferencedTableName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReferencedTableName);
      }
      referencedColumns_.WriteTo(output, _repeated_referencedColumns_codec);
      foreignColumns_.WriteTo(output, _repeated_foreignColumns_codec);
      if (UpdateRule != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UpdateRule);
      }
      if (DeleteRule != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DeleteRule);
      }
      if (HasKeyName) {
        output.WriteRawTag(98);
        output.WriteString(KeyName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReferencedNamespaceName) {
        output.WriteRawTag(18);
        output.WriteString(ReferencedNamespaceName);
      }
      if (ReferencedTableName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReferencedTableName);
      }
      referencedColumns_.WriteTo(ref output, _repeated_referencedColumns_codec);
      foreignColumns_.WriteTo(ref output, _repeated_foreignColumns_codec);
      if (UpdateRule != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UpdateRule);
      }
      if (DeleteRule != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DeleteRule);
      }
      if (HasKeyName) {
        output.WriteRawTag(98);
        output.WriteString(KeyName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasReferencedNamespaceName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferencedNamespaceName);
      }
      if (ReferencedTableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferencedTableName);
      }
      size += referencedColumns_.CalculateSize(_repeated_referencedColumns_codec);
      size += foreignColumns_.CalculateSize(_repeated_foreignColumns_codec);
      if (UpdateRule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdateRule);
      }
      if (DeleteRule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeleteRule);
      }
      if (HasKeyName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForeignKey other) {
      if (other == null) {
        return;
      }
      if (other.HasReferencedNamespaceName) {
        ReferencedNamespaceName = other.ReferencedNamespaceName;
      }
      if (other.ReferencedTableName.Length != 0) {
        ReferencedTableName = other.ReferencedTableName;
      }
      referencedColumns_.Add(other.referencedColumns_);
      foreignColumns_.Add(other.foreignColumns_);
      if (other.UpdateRule != 0) {
        UpdateRule = other.UpdateRule;
      }
      if (other.DeleteRule != 0) {
        DeleteRule = other.DeleteRule;
      }
      if (other.HasKeyName) {
        KeyName = other.KeyName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            ReferencedNamespaceName = input.ReadString();
            break;
          }
          case 26: {
            ReferencedTableName = input.ReadString();
            break;
          }
          case 34: {
            referencedColumns_.AddEntriesFrom(input, _repeated_referencedColumns_codec);
            break;
          }
          case 66: {
            foreignColumns_.AddEntriesFrom(input, _repeated_foreignColumns_codec);
            break;
          }
          case 80: {
            UpdateRule = input.ReadInt32();
            break;
          }
          case 88: {
            DeleteRule = input.ReadInt32();
            break;
          }
          case 98: {
            KeyName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            ReferencedNamespaceName = input.ReadString();
            break;
          }
          case 26: {
            ReferencedTableName = input.ReadString();
            break;
          }
          case 34: {
            referencedColumns_.AddEntriesFrom(ref input, _repeated_referencedColumns_codec);
            break;
          }
          case 66: {
            foreignColumns_.AddEntriesFrom(ref input, _repeated_foreignColumns_codec);
            break;
          }
          case 80: {
            UpdateRule = input.ReadInt32();
            break;
          }
          case 88: {
            DeleteRule = input.ReadInt32();
            break;
          }
          case 98: {
            KeyName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///The Index message provides details about an index defined on a table. Indexes are crucial for improving the performance of data retrieval operations by effectively organizing the data stored in a database table. This message includes information about the index's database, namespace (or schema), table, uniqueness, name, columns involved, physical location, and type.
  /// </summary>
  public sealed partial class Index : pb::IMessage<Index>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Index> _parser = new pb::MessageParser<Index>(() => new Index());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Index> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaResponsesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Index() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Index(Index other) : this() {
      namespaceName_ = other.namespaceName_;
      tableName_ = other.tableName_;
      unique_ = other.unique_;
      indexName_ = other.indexName_;
      columns_ = other.columns_.Clone();
      location_ = other.location_;
      indexType_ = other.indexType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Index Clone() {
      return new Index(this);
    }

    /// <summary>Field number for the "namespace_name" field.</summary>
    public const int NamespaceNameFieldNumber = 2;
    private string namespaceName_ = "";
    /// <summary>
    ///
    ///The namespace or schema of the indexed table.
    ///This indicates the specific namespace or schema within the database where the indexed table resides.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamespaceName {
      get { return namespaceName_; }
      set {
        namespaceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 3;
    private string tableName_ = "";
    /// <summary>
    ///
    ///The table on which the index is defined.
    ///This field identifies the specific table within the namespace that the index belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unique" field.</summary>
    public const int UniqueFieldNumber = 4;
    private bool unique_;
    /// <summary>
    ///
    ///Indicates if the index enforces unique values.
    ///A boolean value where true means the index ensures that all values in the index are unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unique {
      get { return unique_; }
      set {
        unique_ = value;
      }
    }

    /// <summary>Field number for the "index_name" field.</summary>
    public const int IndexNameFieldNumber = 5;
    private string indexName_ = "";
    /// <summary>
    ///
    ///The name of the index.
    ///This allows for the naming of the index for easier reference and management within the database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IndexName {
      get { return indexName_; }
      set {
        indexName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.Column> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(50, global::Polypheny.Prism.Column.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.Column> columns_ = new pbc::RepeatedField<global::Polypheny.Prism.Column>();
    /// <summary>
    ///
    ///The columns that are part of the index.
    ///This repeated field lists all the columns included in the index, defining the order and structure of the index.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.Column> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 8;
    private long location_;
    /// <summary>
    ///
    ///A numeric identifier representing the location or storage of the index.
    ///This field is used to identify where the index is physically stored within the database system, if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "index_type" field.</summary>
    public const int IndexTypeFieldNumber = 9;
    private int indexType_;
    /// <summary>
    ///
    ///A numeric representation indicating the type or mechanism of the index.
    ///This could represent different types of indexing strategies used by the database system, such as B-tree, hash, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndexType {
      get { return indexType_; }
      set {
        indexType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Index);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Index other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NamespaceName != other.NamespaceName) return false;
      if (TableName != other.TableName) return false;
      if (Unique != other.Unique) return false;
      if (IndexName != other.IndexName) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if (Location != other.Location) return false;
      if (IndexType != other.IndexType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NamespaceName.Length != 0) hash ^= NamespaceName.GetHashCode();
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (Unique != false) hash ^= Unique.GetHashCode();
      if (IndexName.Length != 0) hash ^= IndexName.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (Location != 0L) hash ^= Location.GetHashCode();
      if (IndexType != 0) hash ^= IndexType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NamespaceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NamespaceName);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableName);
      }
      if (Unique != false) {
        output.WriteRawTag(32);
        output.WriteBool(Unique);
      }
      if (IndexName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IndexName);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      if (Location != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Location);
      }
      if (IndexType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(IndexType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NamespaceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NamespaceName);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableName);
      }
      if (Unique != false) {
        output.WriteRawTag(32);
        output.WriteBool(Unique);
      }
      if (IndexName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IndexName);
      }
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (Location != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Location);
      }
      if (IndexType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(IndexType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NamespaceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespaceName);
      }
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (Unique != false) {
        size += 1 + 1;
      }
      if (IndexName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IndexName);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (Location != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Location);
      }
      if (IndexType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IndexType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Index other) {
      if (other == null) {
        return;
      }
      if (other.NamespaceName.Length != 0) {
        NamespaceName = other.NamespaceName;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.Unique != false) {
        Unique = other.Unique;
      }
      if (other.IndexName.Length != 0) {
        IndexName = other.IndexName;
      }
      columns_.Add(other.columns_);
      if (other.Location != 0L) {
        Location = other.Location;
      }
      if (other.IndexType != 0) {
        IndexType = other.IndexType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            NamespaceName = input.ReadString();
            break;
          }
          case 26: {
            TableName = input.ReadString();
            break;
          }
          case 32: {
            Unique = input.ReadBool();
            break;
          }
          case 42: {
            IndexName = input.ReadString();
            break;
          }
          case 50: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 64: {
            Location = input.ReadInt64();
            break;
          }
          case 72: {
            IndexType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            NamespaceName = input.ReadString();
            break;
          }
          case 26: {
            TableName = input.ReadString();
            break;
          }
          case 32: {
            Unique = input.ReadBool();
            break;
          }
          case 42: {
            IndexName = input.ReadString();
            break;
          }
          case 50: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 64: {
            Location = input.ReadInt64();
            break;
          }
          case 72: {
            IndexType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///The Graph message will be used to represent the metadata of a graph entity.
  ///As of now, the structure is empty but it is expected to encapsulate various attributes and details about graph entities in the future.
  ///As of now, the Graph message is a placeholder and does not contain any fields.
  /// </summary>
  public sealed partial class Graph : pb::IMessage<Graph>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Graph> _parser = new pb::MessageParser<Graph>(() => new Graph());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Graph> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaResponsesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Graph() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Graph(Graph other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Graph Clone() {
      return new Graph(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Graph);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Graph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Graph other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///The Document message will be used to encapsulate the metadata related to a document entity.
  ///The structure is presently empty, but it’s expected to be expanded with attributes pertinent to documents in future updates.
  ///At this moment, the Document message serves as a placeholder and does not possess any fields.
  /// </summary>
  public sealed partial class Document : pb::IMessage<Document>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Document> _parser = new pb::MessageParser<Document>(() => new Document());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Document> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaResponsesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document(Document other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document Clone() {
      return new Document(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Document);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Document other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Document other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
