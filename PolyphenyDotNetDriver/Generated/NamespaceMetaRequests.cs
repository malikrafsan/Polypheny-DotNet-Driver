// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: org/polypheny/prism/namespace_meta_requests.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Polypheny.Prism {

  /// <summary>Holder for reflection information generated from org/polypheny/prism/namespace_meta_requests.proto</summary>
  public static partial class NamespaceMetaRequestsReflection {

    #region Descriptor
    /// <summary>File descriptor for org/polypheny/prism/namespace_meta_requests.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NamespaceMetaRequestsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFvcmcvcG9seXBoZW55L3ByaXNtL25hbWVzcGFjZV9tZXRhX3JlcXVlc3Rz",
            "LnByb3RvEhNvcmcucG9seXBoZW55LnByaXNtInkKEU5hbWVzcGFjZXNSZXF1",
            "ZXN0Eh4KEW5hbWVzcGFjZV9wYXR0ZXJuGAEgASgJSACIAQESGwoObmFtZXNw",
            "YWNlX3R5cGUYAiABKAlIAYgBAUIUChJfbmFtZXNwYWNlX3BhdHRlcm5CEQoP",
            "X25hbWVzcGFjZV90eXBlIlkKD0VudGl0aWVzUmVxdWVzdBIWCg5uYW1lc3Bh",
            "Y2VfbmFtZRgBIAEoCRIbCg5lbnRpdHlfcGF0dGVybhgCIAEoCUgAiAEBQhEK",
            "D19lbnRpdHlfcGF0dGVybkJTChNvcmcucG9seXBoZW55LnByaXNtQg1OYW1l",
            "c3BhY2VNZXRhUAFaGW9yZy9wb2x5cGhlbnkvcHJpc207cHJpc22qAg9Qb2x5",
            "cGhlbnkuUHJpc21iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.NamespacesRequest), global::Polypheny.Prism.NamespacesRequest.Parser, new[]{ "NamespacePattern", "NamespaceType" }, new[]{ "NamespacePattern", "NamespaceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.EntitiesRequest), global::Polypheny.Prism.EntitiesRequest.Parser, new[]{ "NamespaceName", "EntityPattern" }, new[]{ "EntityPattern" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///The NamespacesRequest message allows querying for namespaces based on specific patterns in their names as well as their types.
  /// </summary>
  public sealed partial class NamespacesRequest : pb::IMessage<NamespacesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NamespacesRequest> _parser = new pb::MessageParser<NamespacesRequest>(() => new NamespacesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NamespacesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaRequestsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamespacesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamespacesRequest(NamespacesRequest other) : this() {
      namespacePattern_ = other.namespacePattern_;
      namespaceType_ = other.namespaceType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamespacesRequest Clone() {
      return new NamespacesRequest(this);
    }

    /// <summary>Field number for the "namespace_pattern" field.</summary>
    public const int NamespacePatternFieldNumber = 1;
    private string namespacePattern_;
    /// <summary>
    ///
    ///An optional pattern that can be used to filter the returned namespaces based on their names.
    ///For example, using a pattern like “user_*” might return all namespaces starting with “user_”.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamespacePattern {
      get { return namespacePattern_ ?? ""; }
      set {
        namespacePattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "namespace_pattern" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNamespacePattern {
      get { return namespacePattern_ != null; }
    }
    /// <summary>Clears the value of the "namespace_pattern" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNamespacePattern() {
      namespacePattern_ = null;
    }

    /// <summary>Field number for the "namespace_type" field.</summary>
    public const int NamespaceTypeFieldNumber = 2;
    private string namespaceType_;
    /// <summary>
    /// An optional type specifier that can be used to filter namespaces based on their type. This allows clients to request namespaces of a particular type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamespaceType {
      get { return namespaceType_ ?? ""; }
      set {
        namespaceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "namespace_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNamespaceType {
      get { return namespaceType_ != null; }
    }
    /// <summary>Clears the value of the "namespace_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNamespaceType() {
      namespaceType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NamespacesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NamespacesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NamespacePattern != other.NamespacePattern) return false;
      if (NamespaceType != other.NamespaceType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNamespacePattern) hash ^= NamespacePattern.GetHashCode();
      if (HasNamespaceType) hash ^= NamespaceType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNamespacePattern) {
        output.WriteRawTag(10);
        output.WriteString(NamespacePattern);
      }
      if (HasNamespaceType) {
        output.WriteRawTag(18);
        output.WriteString(NamespaceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNamespacePattern) {
        output.WriteRawTag(10);
        output.WriteString(NamespacePattern);
      }
      if (HasNamespaceType) {
        output.WriteRawTag(18);
        output.WriteString(NamespaceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNamespacePattern) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespacePattern);
      }
      if (HasNamespaceType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespaceType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NamespacesRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasNamespacePattern) {
        NamespacePattern = other.NamespacePattern;
      }
      if (other.HasNamespaceType) {
        NamespaceType = other.NamespaceType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NamespacePattern = input.ReadString();
            break;
          }
          case 18: {
            NamespaceType = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            NamespacePattern = input.ReadString();
            break;
          }
          case 18: {
            NamespaceType = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///The EntitiesRequest message is meant for querying details about entities within a specific namespace, possibly using a pattern to narrow down the results.
  /// </summary>
  public sealed partial class EntitiesRequest : pb::IMessage<EntitiesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EntitiesRequest> _parser = new pb::MessageParser<EntitiesRequest>(() => new EntitiesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntitiesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.NamespaceMetaRequestsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntitiesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntitiesRequest(EntitiesRequest other) : this() {
      namespaceName_ = other.namespaceName_;
      entityPattern_ = other.entityPattern_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntitiesRequest Clone() {
      return new EntitiesRequest(this);
    }

    /// <summary>Field number for the "namespace_name" field.</summary>
    public const int NamespaceNameFieldNumber = 1;
    private string namespaceName_ = "";
    /// <summary>
    /// The name of the namespace within which entities are to be searched.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamespaceName {
      get { return namespaceName_; }
      set {
        namespaceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entity_pattern" field.</summary>
    public const int EntityPatternFieldNumber = 2;
    private string entityPattern_;
    /// <summary>
    /// An optional pattern for filtering the returned entities. This can help in narrowing down the list of entities based on a naming pattern or other criteria.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityPattern {
      get { return entityPattern_ ?? ""; }
      set {
        entityPattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "entity_pattern" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityPattern {
      get { return entityPattern_ != null; }
    }
    /// <summary>Clears the value of the "entity_pattern" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityPattern() {
      entityPattern_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntitiesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntitiesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NamespaceName != other.NamespaceName) return false;
      if (EntityPattern != other.EntityPattern) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NamespaceName.Length != 0) hash ^= NamespaceName.GetHashCode();
      if (HasEntityPattern) hash ^= EntityPattern.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NamespaceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NamespaceName);
      }
      if (HasEntityPattern) {
        output.WriteRawTag(18);
        output.WriteString(EntityPattern);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NamespaceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NamespaceName);
      }
      if (HasEntityPattern) {
        output.WriteRawTag(18);
        output.WriteString(EntityPattern);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NamespaceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespaceName);
      }
      if (HasEntityPattern) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityPattern);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntitiesRequest other) {
      if (other == null) {
        return;
      }
      if (other.NamespaceName.Length != 0) {
        NamespaceName = other.NamespaceName;
      }
      if (other.HasEntityPattern) {
        EntityPattern = other.EntityPattern;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NamespaceName = input.ReadString();
            break;
          }
          case 18: {
            EntityPattern = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            NamespaceName = input.ReadString();
            break;
          }
          case 18: {
            EntityPattern = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
