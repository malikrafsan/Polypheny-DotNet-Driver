// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: org/polypheny/prism/statement_requests.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Polypheny.Prism {

  /// <summary>Holder for reflection information generated from org/polypheny/prism/statement_requests.proto</summary>
  public static partial class StatementRequestsReflection {

    #region Descriptor
    /// <summary>File descriptor for org/polypheny/prism/statement_requests.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StatementRequestsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixvcmcvcG9seXBoZW55L3ByaXNtL3N0YXRlbWVudF9yZXF1ZXN0cy5wcm90",
            "bxITb3JnLnBvbHlwaGVueS5wcmlzbRofb3JnL3BvbHlwaGVueS9wcmlzbS92",
            "YWx1ZS5wcm90byIqChJDbG9zZVJlc3VsdFJlcXVlc3QSFAoMc3RhdGVtZW50",
            "X2lkGAEgASgFIqoBCiZFeGVjdXRlVW5wYXJhbWV0ZXJpemVkU3RhdGVtZW50",
            "UmVxdWVzdBIVCg1sYW5ndWFnZV9uYW1lGAEgASgJEhEKCXN0YXRlbWVudBgC",
            "IAEoCRIXCgpmZXRjaF9zaXplGAMgASgFSACIAQESGwoObmFtZXNwYWNlX25h",
            "bWUYBCABKAlIAYgBAUINCgtfZmV0Y2hfc2l6ZUIRCg9fbmFtZXNwYWNlX25h",
            "bWUifgorRXhlY3V0ZVVucGFyYW1ldGVyaXplZFN0YXRlbWVudEJhdGNoUmVx",
            "dWVzdBJPCgpzdGF0ZW1lbnRzGAEgAygLMjsub3JnLnBvbHlwaGVueS5wcmlz",
            "bS5FeGVjdXRlVW5wYXJhbWV0ZXJpemVkU3RhdGVtZW50UmVxdWVzdCJzChdQ",
            "cmVwYXJlU3RhdGVtZW50UmVxdWVzdBIVCg1sYW5ndWFnZV9uYW1lGAEgASgJ",
            "EhEKCXN0YXRlbWVudBgCIAEoCRIbCg5uYW1lc3BhY2VfbmFtZRgDIAEoCUgA",
            "iAEBQhEKD19uYW1lc3BhY2VfbmFtZSKaAQoeRXhlY3V0ZUluZGV4ZWRTdGF0",
            "ZW1lbnRSZXF1ZXN0EhQKDHN0YXRlbWVudF9pZBgBIAEoBRI6CgpwYXJhbWV0",
            "ZXJzGAIgASgLMiYub3JnLnBvbHlwaGVueS5wcmlzbS5JbmRleGVkUGFyYW1l",
            "dGVycxIXCgpmZXRjaF9zaXplGAMgASgFSACIAQFCDQoLX2ZldGNoX3NpemUi",
            "dwojRXhlY3V0ZUluZGV4ZWRTdGF0ZW1lbnRCYXRjaFJlcXVlc3QSFAoMc3Rh",
            "dGVtZW50X2lkGAEgASgFEjoKCnBhcmFtZXRlcnMYAiADKAsyJi5vcmcucG9s",
            "eXBoZW55LnByaXNtLkluZGV4ZWRQYXJhbWV0ZXJzIpYBChxFeGVjdXRlTmFt",
            "ZWRTdGF0ZW1lbnRSZXF1ZXN0EhQKDHN0YXRlbWVudF9pZBgBIAEoBRI4Cgpw",
            "YXJhbWV0ZXJzGAIgASgLMiQub3JnLnBvbHlwaGVueS5wcmlzbS5OYW1lZFBh",
            "cmFtZXRlcnMSFwoKZmV0Y2hfc2l6ZRgDIAEoBUgAiAEBQg0KC19mZXRjaF9z",
            "aXplIkgKEUluZGV4ZWRQYXJhbWV0ZXJzEjMKCnBhcmFtZXRlcnMYASADKAsy",
            "Hy5vcmcucG9seXBoZW55LnByaXNtLlByb3RvVmFsdWUirwEKD05hbWVkUGFy",
            "YW1ldGVycxJICgpwYXJhbWV0ZXJzGAEgAygLMjQub3JnLnBvbHlwaGVueS5w",
            "cmlzbS5OYW1lZFBhcmFtZXRlcnMuUGFyYW1ldGVyc0VudHJ5GlIKD1BhcmFt",
            "ZXRlcnNFbnRyeRILCgNrZXkYASABKAkSLgoFdmFsdWUYAiABKAsyHy5vcmcu",
            "cG9seXBoZW55LnByaXNtLlByb3RvVmFsdWU6AjgBIi0KFUNsb3NlU3RhdGVt",
            "ZW50UmVxdWVzdBIUCgxzdGF0ZW1lbnRfaWQYASABKAUiTAoMRmV0Y2hSZXF1",
            "ZXN0EhQKDHN0YXRlbWVudF9pZBgBIAEoBRIXCgpmZXRjaF9zaXplGAIgASgF",
            "SACIAQFCDQoLX2ZldGNoX3NpemVCVwoTb3JnLnBvbHlwaGVueS5wcmlzbUIR",
            "U3RhdGVtZW50UmVxdWVzdHNQAVoZb3JnL3BvbHlwaGVueS9wcmlzbTtwcmlz",
            "baoCD1BvbHlwaGVueS5QcmlzbWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Polypheny.Prism.ValueReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.CloseResultRequest), global::Polypheny.Prism.CloseResultRequest.Parser, new[]{ "StatementId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.ExecuteUnparameterizedStatementRequest), global::Polypheny.Prism.ExecuteUnparameterizedStatementRequest.Parser, new[]{ "LanguageName", "Statement", "FetchSize", "NamespaceName" }, new[]{ "FetchSize", "NamespaceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.ExecuteUnparameterizedStatementBatchRequest), global::Polypheny.Prism.ExecuteUnparameterizedStatementBatchRequest.Parser, new[]{ "Statements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.PrepareStatementRequest), global::Polypheny.Prism.PrepareStatementRequest.Parser, new[]{ "LanguageName", "Statement", "NamespaceName" }, new[]{ "NamespaceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.ExecuteIndexedStatementRequest), global::Polypheny.Prism.ExecuteIndexedStatementRequest.Parser, new[]{ "StatementId", "Parameters", "FetchSize" }, new[]{ "FetchSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.ExecuteIndexedStatementBatchRequest), global::Polypheny.Prism.ExecuteIndexedStatementBatchRequest.Parser, new[]{ "StatementId", "Parameters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.ExecuteNamedStatementRequest), global::Polypheny.Prism.ExecuteNamedStatementRequest.Parser, new[]{ "StatementId", "Parameters", "FetchSize" }, new[]{ "FetchSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.IndexedParameters), global::Polypheny.Prism.IndexedParameters.Parser, new[]{ "Parameters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.NamedParameters), global::Polypheny.Prism.NamedParameters.Parser, new[]{ "Parameters" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.CloseStatementRequest), global::Polypheny.Prism.CloseStatementRequest.Parser, new[]{ "StatementId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Polypheny.Prism.FetchRequest), global::Polypheny.Prism.FetchRequest.Parser, new[]{ "StatementId", "FetchSize" }, new[]{ "FetchSize" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///Closes the result set of the statement matching the specified statement id. If no such statement exists, or the result is already closed, this request is ignored.
  /// </summary>
  public sealed partial class CloseResultRequest : pb::IMessage<CloseResultRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CloseResultRequest> _parser = new pb::MessageParser<CloseResultRequest>(() => new CloseResultRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseResultRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.StatementRequestsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseResultRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseResultRequest(CloseResultRequest other) : this() {
      statementId_ = other.statementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseResultRequest Clone() {
      return new CloseResultRequest(this);
    }

    /// <summary>Field number for the "statement_id" field.</summary>
    public const int StatementIdFieldNumber = 1;
    private int statementId_;
    /// <summary>
    /// The id of the statement of which the result set should be closed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseResultRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseResultRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatementId != other.StatementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StatementId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StatementId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatementId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseResultRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatementId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StatementId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///Represents a request to execute a statement without any parameters.
  ///This message includes details about the language in which the statement is written, the statement itself, and optional attributes such as fetch size and namespace name to control how the statement is executed.
  /// </summary>
  public sealed partial class ExecuteUnparameterizedStatementRequest : pb::IMessage<ExecuteUnparameterizedStatementRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExecuteUnparameterizedStatementRequest> _parser = new pb::MessageParser<ExecuteUnparameterizedStatementRequest>(() => new ExecuteUnparameterizedStatementRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteUnparameterizedStatementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.StatementRequestsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteUnparameterizedStatementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteUnparameterizedStatementRequest(ExecuteUnparameterizedStatementRequest other) : this() {
      _hasBits0 = other._hasBits0;
      languageName_ = other.languageName_;
      statement_ = other.statement_;
      fetchSize_ = other.fetchSize_;
      namespaceName_ = other.namespaceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteUnparameterizedStatementRequest Clone() {
      return new ExecuteUnparameterizedStatementRequest(this);
    }

    /// <summary>Field number for the "language_name" field.</summary>
    public const int LanguageNameFieldNumber = 1;
    private string languageName_ = "";
    /// <summary>
    /// Specifies the query language of the statement being executed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageName {
      get { return languageName_; }
      set {
        languageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "statement" field.</summary>
    public const int StatementFieldNumber = 2;
    private string statement_ = "";
    /// <summary>
    /// The statement to be executed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Statement {
      get { return statement_; }
      set {
        statement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fetch_size" field.</summary>
    public const int FetchSizeFieldNumber = 3;
    private int fetchSize_;
    /// <summary>
    ///
    ///(Optional) Number of rows to include into the response message of this call.
    ///More rows can be fetched afterwards. If not specified, a default value is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FetchSize {
      get { if ((_hasBits0 & 1) != 0) { return fetchSize_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        fetchSize_ = value;
      }
    }
    /// <summary>Gets whether the "fetch_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFetchSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fetch_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFetchSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "namespace_name" field.</summary>
    public const int NamespaceNameFieldNumber = 4;
    private string namespaceName_;
    /// <summary>
    ///
    ///(Optional) The namespace under which the statement should be executed.
    ///If not specified, the namespace specified for the connection is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamespaceName {
      get { return namespaceName_ ?? ""; }
      set {
        namespaceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "namespace_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNamespaceName {
      get { return namespaceName_ != null; }
    }
    /// <summary>Clears the value of the "namespace_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNamespaceName() {
      namespaceName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteUnparameterizedStatementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteUnparameterizedStatementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LanguageName != other.LanguageName) return false;
      if (Statement != other.Statement) return false;
      if (FetchSize != other.FetchSize) return false;
      if (NamespaceName != other.NamespaceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LanguageName.Length != 0) hash ^= LanguageName.GetHashCode();
      if (Statement.Length != 0) hash ^= Statement.GetHashCode();
      if (HasFetchSize) hash ^= FetchSize.GetHashCode();
      if (HasNamespaceName) hash ^= NamespaceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LanguageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LanguageName);
      }
      if (Statement.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Statement);
      }
      if (HasFetchSize) {
        output.WriteRawTag(24);
        output.WriteInt32(FetchSize);
      }
      if (HasNamespaceName) {
        output.WriteRawTag(34);
        output.WriteString(NamespaceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LanguageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LanguageName);
      }
      if (Statement.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Statement);
      }
      if (HasFetchSize) {
        output.WriteRawTag(24);
        output.WriteInt32(FetchSize);
      }
      if (HasNamespaceName) {
        output.WriteRawTag(34);
        output.WriteString(NamespaceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LanguageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageName);
      }
      if (Statement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Statement);
      }
      if (HasFetchSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FetchSize);
      }
      if (HasNamespaceName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespaceName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteUnparameterizedStatementRequest other) {
      if (other == null) {
        return;
      }
      if (other.LanguageName.Length != 0) {
        LanguageName = other.LanguageName;
      }
      if (other.Statement.Length != 0) {
        Statement = other.Statement;
      }
      if (other.HasFetchSize) {
        FetchSize = other.FetchSize;
      }
      if (other.HasNamespaceName) {
        NamespaceName = other.NamespaceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LanguageName = input.ReadString();
            break;
          }
          case 18: {
            Statement = input.ReadString();
            break;
          }
          case 24: {
            FetchSize = input.ReadInt32();
            break;
          }
          case 34: {
            NamespaceName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LanguageName = input.ReadString();
            break;
          }
          case 18: {
            Statement = input.ReadString();
            break;
          }
          case 24: {
            FetchSize = input.ReadInt32();
            break;
          }
          case 34: {
            NamespaceName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///Encapsulates a batch of unparameterized statements to be executed.
  ///This is useful for executing multiple statements in a single call,
  ///improving efficiency and performance by reducing the number of round trips to the server.
  /// </summary>
  public sealed partial class ExecuteUnparameterizedStatementBatchRequest : pb::IMessage<ExecuteUnparameterizedStatementBatchRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExecuteUnparameterizedStatementBatchRequest> _parser = new pb::MessageParser<ExecuteUnparameterizedStatementBatchRequest>(() => new ExecuteUnparameterizedStatementBatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteUnparameterizedStatementBatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.StatementRequestsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteUnparameterizedStatementBatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteUnparameterizedStatementBatchRequest(ExecuteUnparameterizedStatementBatchRequest other) : this() {
      statements_ = other.statements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteUnparameterizedStatementBatchRequest Clone() {
      return new ExecuteUnparameterizedStatementBatchRequest(this);
    }

    /// <summary>Field number for the "statements" field.</summary>
    public const int StatementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.ExecuteUnparameterizedStatementRequest> _repeated_statements_codec
        = pb::FieldCodec.ForMessage(10, global::Polypheny.Prism.ExecuteUnparameterizedStatementRequest.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.ExecuteUnparameterizedStatementRequest> statements_ = new pbc::RepeatedField<global::Polypheny.Prism.ExecuteUnparameterizedStatementRequest>();
    /// <summary>
    ///
    ///List of statements to be executed. Each statement is an instance of ExecuteUnparameterizedStatementRequest,
    ///allowing for individual control over the execution parameters of each statement in the batch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.ExecuteUnparameterizedStatementRequest> Statements {
      get { return statements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteUnparameterizedStatementBatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteUnparameterizedStatementBatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!statements_.Equals(other.statements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= statements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      statements_.WriteTo(output, _repeated_statements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      statements_.WriteTo(ref output, _repeated_statements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += statements_.CalculateSize(_repeated_statements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteUnparameterizedStatementBatchRequest other) {
      if (other == null) {
        return;
      }
      statements_.Add(other.statements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            statements_.AddEntriesFrom(input, _repeated_statements_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            statements_.AddEntriesFrom(ref input, _repeated_statements_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///Represents a request to prepare a statement for execution.
  ///This message includes the language of the statement, the statement text itself, and optionally,
  ///the namespace where the statement should be prepared. Preparing a statement can improve performance for repeated execution.
  /// </summary>
  public sealed partial class PrepareStatementRequest : pb::IMessage<PrepareStatementRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PrepareStatementRequest> _parser = new pb::MessageParser<PrepareStatementRequest>(() => new PrepareStatementRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrepareStatementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.StatementRequestsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareStatementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareStatementRequest(PrepareStatementRequest other) : this() {
      languageName_ = other.languageName_;
      statement_ = other.statement_;
      namespaceName_ = other.namespaceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareStatementRequest Clone() {
      return new PrepareStatementRequest(this);
    }

    /// <summary>Field number for the "language_name" field.</summary>
    public const int LanguageNameFieldNumber = 1;
    private string languageName_ = "";
    /// <summary>
    /// Specifies the query language of the statement to be prepared.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageName {
      get { return languageName_; }
      set {
        languageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "statement" field.</summary>
    public const int StatementFieldNumber = 2;
    private string statement_ = "";
    /// <summary>
    /// The statement to be prepared.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Statement {
      get { return statement_; }
      set {
        statement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace_name" field.</summary>
    public const int NamespaceNameFieldNumber = 3;
    private string namespaceName_;
    /// <summary>
    /// (Optional) The namespace under which the statement should be prepared.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamespaceName {
      get { return namespaceName_ ?? ""; }
      set {
        namespaceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "namespace_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNamespaceName {
      get { return namespaceName_ != null; }
    }
    /// <summary>Clears the value of the "namespace_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNamespaceName() {
      namespaceName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrepareStatementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrepareStatementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LanguageName != other.LanguageName) return false;
      if (Statement != other.Statement) return false;
      if (NamespaceName != other.NamespaceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LanguageName.Length != 0) hash ^= LanguageName.GetHashCode();
      if (Statement.Length != 0) hash ^= Statement.GetHashCode();
      if (HasNamespaceName) hash ^= NamespaceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LanguageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LanguageName);
      }
      if (Statement.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Statement);
      }
      if (HasNamespaceName) {
        output.WriteRawTag(26);
        output.WriteString(NamespaceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LanguageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LanguageName);
      }
      if (Statement.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Statement);
      }
      if (HasNamespaceName) {
        output.WriteRawTag(26);
        output.WriteString(NamespaceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LanguageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageName);
      }
      if (Statement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Statement);
      }
      if (HasNamespaceName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespaceName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrepareStatementRequest other) {
      if (other == null) {
        return;
      }
      if (other.LanguageName.Length != 0) {
        LanguageName = other.LanguageName;
      }
      if (other.Statement.Length != 0) {
        Statement = other.Statement;
      }
      if (other.HasNamespaceName) {
        NamespaceName = other.NamespaceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LanguageName = input.ReadString();
            break;
          }
          case 18: {
            Statement = input.ReadString();
            break;
          }
          case 26: {
            NamespaceName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LanguageName = input.ReadString();
            break;
          }
          case 18: {
            Statement = input.ReadString();
            break;
          }
          case 26: {
            NamespaceName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///Represents a request to execute a previously prepared statement by its ID, using indexed parameters.
  ///his allows for efficient execution of prepared statements with the provided parameters.
  /// </summary>
  public sealed partial class ExecuteIndexedStatementRequest : pb::IMessage<ExecuteIndexedStatementRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExecuteIndexedStatementRequest> _parser = new pb::MessageParser<ExecuteIndexedStatementRequest>(() => new ExecuteIndexedStatementRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteIndexedStatementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.StatementRequestsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteIndexedStatementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteIndexedStatementRequest(ExecuteIndexedStatementRequest other) : this() {
      _hasBits0 = other._hasBits0;
      statementId_ = other.statementId_;
      parameters_ = other.parameters_ != null ? other.parameters_.Clone() : null;
      fetchSize_ = other.fetchSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteIndexedStatementRequest Clone() {
      return new ExecuteIndexedStatementRequest(this);
    }

    /// <summary>Field number for the "statement_id" field.</summary>
    public const int StatementIdFieldNumber = 1;
    private int statementId_;
    /// <summary>
    /// The unique identifier of the prepared statement to be executed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 2;
    private global::Polypheny.Prism.IndexedParameters parameters_;
    /// <summary>
    /// The indexed parameters to be used with the statement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Polypheny.Prism.IndexedParameters Parameters {
      get { return parameters_; }
      set {
        parameters_ = value;
      }
    }

    /// <summary>Field number for the "fetch_size" field.</summary>
    public const int FetchSizeFieldNumber = 3;
    private int fetchSize_;
    /// <summary>
    /// (Optional) Number of rows to include into the response message of this call. More rows can be fetched afterwards.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FetchSize {
      get { if ((_hasBits0 & 1) != 0) { return fetchSize_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        fetchSize_ = value;
      }
    }
    /// <summary>Gets whether the "fetch_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFetchSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fetch_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFetchSize() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteIndexedStatementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteIndexedStatementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatementId != other.StatementId) return false;
      if (!object.Equals(Parameters, other.Parameters)) return false;
      if (FetchSize != other.FetchSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      if (parameters_ != null) hash ^= Parameters.GetHashCode();
      if (HasFetchSize) hash ^= FetchSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StatementId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatementId);
      }
      if (parameters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Parameters);
      }
      if (HasFetchSize) {
        output.WriteRawTag(24);
        output.WriteInt32(FetchSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StatementId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatementId);
      }
      if (parameters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Parameters);
      }
      if (HasFetchSize) {
        output.WriteRawTag(24);
        output.WriteInt32(FetchSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatementId);
      }
      if (parameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameters);
      }
      if (HasFetchSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FetchSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteIndexedStatementRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      if (other.parameters_ != null) {
        if (parameters_ == null) {
          Parameters = new global::Polypheny.Prism.IndexedParameters();
        }
        Parameters.MergeFrom(other.Parameters);
      }
      if (other.HasFetchSize) {
        FetchSize = other.FetchSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatementId = input.ReadInt32();
            break;
          }
          case 18: {
            if (parameters_ == null) {
              Parameters = new global::Polypheny.Prism.IndexedParameters();
            }
            input.ReadMessage(Parameters);
            break;
          }
          case 24: {
            FetchSize = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StatementId = input.ReadInt32();
            break;
          }
          case 18: {
            if (parameters_ == null) {
              Parameters = new global::Polypheny.Prism.IndexedParameters();
            }
            input.ReadMessage(Parameters);
            break;
          }
          case 24: {
            FetchSize = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///Encapsulates a batch request to execute a prepared statement multiple times with different sets of indexed parameters.
  ///This is useful for executing the same statement with various parameter sets in a single operation, enhancing performance and efficiency.
  /// </summary>
  public sealed partial class ExecuteIndexedStatementBatchRequest : pb::IMessage<ExecuteIndexedStatementBatchRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExecuteIndexedStatementBatchRequest> _parser = new pb::MessageParser<ExecuteIndexedStatementBatchRequest>(() => new ExecuteIndexedStatementBatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteIndexedStatementBatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.StatementRequestsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteIndexedStatementBatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteIndexedStatementBatchRequest(ExecuteIndexedStatementBatchRequest other) : this() {
      statementId_ = other.statementId_;
      parameters_ = other.parameters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteIndexedStatementBatchRequest Clone() {
      return new ExecuteIndexedStatementBatchRequest(this);
    }

    /// <summary>Field number for the "statement_id" field.</summary>
    public const int StatementIdFieldNumber = 1;
    private int statementId_;
    /// <summary>
    /// The unique identifier of the prepared statement to be executed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.IndexedParameters> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(18, global::Polypheny.Prism.IndexedParameters.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.IndexedParameters> parameters_ = new pbc::RepeatedField<global::Polypheny.Prism.IndexedParameters>();
    /// <summary>
    /// List of sets of indexed parameters for multiple executions of the statement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.IndexedParameters> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteIndexedStatementBatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteIndexedStatementBatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatementId != other.StatementId) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      hash ^= parameters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StatementId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatementId);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StatementId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatementId);
      }
      parameters_.WriteTo(ref output, _repeated_parameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatementId);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteIndexedStatementBatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      parameters_.Add(other.parameters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatementId = input.ReadInt32();
            break;
          }
          case 18: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StatementId = input.ReadInt32();
            break;
          }
          case 18: {
            parameters_.AddEntriesFrom(ref input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///Represents a request to execute a previously prepared statement by its ID, using named parameters.
  ///This approach allows for parameter values to be associated with specific parameter names in the statement,
  ///providing clarity and reducing errors in parameter placement.
  /// </summary>
  public sealed partial class ExecuteNamedStatementRequest : pb::IMessage<ExecuteNamedStatementRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExecuteNamedStatementRequest> _parser = new pb::MessageParser<ExecuteNamedStatementRequest>(() => new ExecuteNamedStatementRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteNamedStatementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.StatementRequestsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteNamedStatementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteNamedStatementRequest(ExecuteNamedStatementRequest other) : this() {
      _hasBits0 = other._hasBits0;
      statementId_ = other.statementId_;
      parameters_ = other.parameters_ != null ? other.parameters_.Clone() : null;
      fetchSize_ = other.fetchSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteNamedStatementRequest Clone() {
      return new ExecuteNamedStatementRequest(this);
    }

    /// <summary>Field number for the "statement_id" field.</summary>
    public const int StatementIdFieldNumber = 1;
    private int statementId_;
    /// <summary>
    /// The unique identifier of the prepared statement to be executed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 2;
    private global::Polypheny.Prism.NamedParameters parameters_;
    /// <summary>
    /// The named parameters to be used with the statement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Polypheny.Prism.NamedParameters Parameters {
      get { return parameters_; }
      set {
        parameters_ = value;
      }
    }

    /// <summary>Field number for the "fetch_size" field.</summary>
    public const int FetchSizeFieldNumber = 3;
    private int fetchSize_;
    /// <summary>
    /// (Optional) Number of rows to include into the response message of this call. More rows can be fetched afterwards.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FetchSize {
      get { if ((_hasBits0 & 1) != 0) { return fetchSize_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        fetchSize_ = value;
      }
    }
    /// <summary>Gets whether the "fetch_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFetchSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fetch_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFetchSize() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteNamedStatementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteNamedStatementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatementId != other.StatementId) return false;
      if (!object.Equals(Parameters, other.Parameters)) return false;
      if (FetchSize != other.FetchSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      if (parameters_ != null) hash ^= Parameters.GetHashCode();
      if (HasFetchSize) hash ^= FetchSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StatementId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatementId);
      }
      if (parameters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Parameters);
      }
      if (HasFetchSize) {
        output.WriteRawTag(24);
        output.WriteInt32(FetchSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StatementId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatementId);
      }
      if (parameters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Parameters);
      }
      if (HasFetchSize) {
        output.WriteRawTag(24);
        output.WriteInt32(FetchSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatementId);
      }
      if (parameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameters);
      }
      if (HasFetchSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FetchSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteNamedStatementRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      if (other.parameters_ != null) {
        if (parameters_ == null) {
          Parameters = new global::Polypheny.Prism.NamedParameters();
        }
        Parameters.MergeFrom(other.Parameters);
      }
      if (other.HasFetchSize) {
        FetchSize = other.FetchSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatementId = input.ReadInt32();
            break;
          }
          case 18: {
            if (parameters_ == null) {
              Parameters = new global::Polypheny.Prism.NamedParameters();
            }
            input.ReadMessage(Parameters);
            break;
          }
          case 24: {
            FetchSize = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StatementId = input.ReadInt32();
            break;
          }
          case 18: {
            if (parameters_ == null) {
              Parameters = new global::Polypheny.Prism.NamedParameters();
            }
            input.ReadMessage(Parameters);
            break;
          }
          case 24: {
            FetchSize = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///Encapsulates indexed parameters for a prepared statement.
  ///This represents a list of parameter values to be used in the statement, where each parameter's position in the list
  ///corresponds to its position in the statement.
  /// </summary>
  public sealed partial class IndexedParameters : pb::IMessage<IndexedParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IndexedParameters> _parser = new pb::MessageParser<IndexedParameters>(() => new IndexedParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IndexedParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.StatementRequestsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndexedParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndexedParameters(IndexedParameters other) : this() {
      parameters_ = other.parameters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndexedParameters Clone() {
      return new IndexedParameters(this);
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Polypheny.Prism.ProtoValue> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(10, global::Polypheny.Prism.ProtoValue.Parser);
    private readonly pbc::RepeatedField<global::Polypheny.Prism.ProtoValue> parameters_ = new pbc::RepeatedField<global::Polypheny.Prism.ProtoValue>();
    /// <summary>
    /// List of values to be used as parameters, indexed by their position in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polypheny.Prism.ProtoValue> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IndexedParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IndexedParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!parameters_.Equals(other.parameters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= parameters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      parameters_.WriteTo(ref output, _repeated_parameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IndexedParameters other) {
      if (other == null) {
        return;
      }
      parameters_.Add(other.parameters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            parameters_.AddEntriesFrom(ref input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///Encapsulates named parameters for a prepared statement. This allows for parameters to be specified by name,
  ///providing a flexible and clear way to supply parameters to a prepared statement.
  /// </summary>
  public sealed partial class NamedParameters : pb::IMessage<NamedParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NamedParameters> _parser = new pb::MessageParser<NamedParameters>(() => new NamedParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NamedParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.StatementRequestsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamedParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamedParameters(NamedParameters other) : this() {
      parameters_ = other.parameters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamedParameters Clone() {
      return new NamedParameters(this);
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Polypheny.Prism.ProtoValue>.Codec _map_parameters_codec
        = new pbc::MapField<string, global::Polypheny.Prism.ProtoValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Polypheny.Prism.ProtoValue.Parser), 10);
    private readonly pbc::MapField<string, global::Polypheny.Prism.ProtoValue> parameters_ = new pbc::MapField<string, global::Polypheny.Prism.ProtoValue>();
    /// <summary>
    /// Map of parameter names to their corresponding values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Polypheny.Prism.ProtoValue> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NamedParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NamedParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Parameters.Equals(other.Parameters)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Parameters.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      parameters_.WriteTo(output, _map_parameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      parameters_.WriteTo(ref output, _map_parameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += parameters_.CalculateSize(_map_parameters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NamedParameters other) {
      if (other == null) {
        return;
      }
      parameters_.Add(other.parameters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            parameters_.AddEntriesFrom(input, _map_parameters_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            parameters_.AddEntriesFrom(ref input, _map_parameters_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///Represents a request to close a statement.
  ///This operation is used to release resources allocated to the statement on the server.
  ///Closing a statement when it is no longer needed is a good practice to manage resources efficiently.
  /// </summary>
  public sealed partial class CloseStatementRequest : pb::IMessage<CloseStatementRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CloseStatementRequest> _parser = new pb::MessageParser<CloseStatementRequest>(() => new CloseStatementRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseStatementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.StatementRequestsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatementRequest(CloseStatementRequest other) : this() {
      statementId_ = other.statementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatementRequest Clone() {
      return new CloseStatementRequest(this);
    }

    /// <summary>Field number for the "statement_id" field.</summary>
    public const int StatementIdFieldNumber = 1;
    private int statementId_;
    /// <summary>
    /// The unique identifier of the statement to be closed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseStatementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseStatementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatementId != other.StatementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StatementId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StatementId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatementId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseStatementRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatementId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StatementId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///Represents a request to fetch a batch of results for a previously executed statement.
  ///This is typically used in conjunction with large result sets,
  ///where the results are fetched in multiple batches to manage memory and network resources effectively.
  /// </summary>
  public sealed partial class FetchRequest : pb::IMessage<FetchRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FetchRequest> _parser = new pb::MessageParser<FetchRequest>(() => new FetchRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FetchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Polypheny.Prism.StatementRequestsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchRequest(FetchRequest other) : this() {
      _hasBits0 = other._hasBits0;
      statementId_ = other.statementId_;
      fetchSize_ = other.fetchSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchRequest Clone() {
      return new FetchRequest(this);
    }

    /// <summary>Field number for the "statement_id" field.</summary>
    public const int StatementIdFieldNumber = 1;
    private int statementId_;
    /// <summary>
    /// The unique identifier of the statement whose results are to be fetched.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatementId {
      get { return statementId_; }
      set {
        statementId_ = value;
      }
    }

    /// <summary>Field number for the "fetch_size" field.</summary>
    public const int FetchSizeFieldNumber = 2;
    private int fetchSize_;
    /// <summary>
    /// (Optional) Number of rows to retrieve in this batch. If no fetch size is specified, a default value is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FetchSize {
      get { if ((_hasBits0 & 1) != 0) { return fetchSize_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        fetchSize_ = value;
      }
    }
    /// <summary>Gets whether the "fetch_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFetchSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fetch_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFetchSize() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FetchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FetchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatementId != other.StatementId) return false;
      if (FetchSize != other.FetchSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatementId != 0) hash ^= StatementId.GetHashCode();
      if (HasFetchSize) hash ^= FetchSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StatementId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatementId);
      }
      if (HasFetchSize) {
        output.WriteRawTag(16);
        output.WriteInt32(FetchSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StatementId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatementId);
      }
      if (HasFetchSize) {
        output.WriteRawTag(16);
        output.WriteInt32(FetchSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatementId);
      }
      if (HasFetchSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FetchSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FetchRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatementId != 0) {
        StatementId = other.StatementId;
      }
      if (other.HasFetchSize) {
        FetchSize = other.FetchSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatementId = input.ReadInt32();
            break;
          }
          case 16: {
            FetchSize = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StatementId = input.ReadInt32();
            break;
          }
          case 16: {
            FetchSize = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
